name: "Continuous Integration"

on:
  push:
  pull_request:
    branches: [ master ]

env:
  AREA: liechtenstein

jobs:
  build:
    name: Compile, install and build mbtiles
    runs-on: ubuntu-16.04

    steps:
    - uses: actions/checkout@v2
    - name: Install boost
      run: |
       # Use the boost-1.72.0-linux-16.04-gcc-x64.tar.gz for Ubuntu 16.04
       mkdir ${{ runner.temp }}/boost
       curl -L "https://github.com/actions/boost-versions/releases/download/1.72.0-20200608.4/boost-1.72.0-linux-16.04-gcc-x64.tar.gz" -o ${{ runner.temp }}/boost.tar.gz
       cd ${{ runner.temp }}/boost && tar xzf ${{ runner.temp }}/boost.tar.gz 
       ls ${{ runner.temp }}/boost
       sh ${{ runner.temp }}/boost/setup.sh
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends build-essential libluajit-5.1-dev libprotobuf-dev libsqlite3-dev protobuf-compiler shapelib libshp-dev 
    - name: Build and install
      env:
        S_CFLAGS: -flto -ffunction-sections -fdata-sections
        S_CXXFLAGS: -flto -ffunction-sections -fdata-sections
        S_LDFLAGS: -Wl,-gc-sections 
      run: |
        mkdir build
        cd build  
        export CFLAGS=${S_CFLAGS} && export CXXFLAGS=${S_CXXFLAGS} && export LDFLAGS=${S_LDFLAGS}
        cmake -DTILEMAKER_BUILD_STATIC=ON -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT=/opt/hostedtoolcache/boost/1.72.0/x64 ..
        make -j 
        sudo make install
    - name: Build openmaptiles-compatible mbtiles files of Liechtenstein
      run: |
        curl http://download.geofabrik.de/europe/${AREA}-latest.osm.pbf -o ${AREA}.osm.pbf
        tilemaker ${AREA}.osm.pbf --config=resources/config-openmaptiles.json --process=resources/process-openmaptiles.lua --output=${AREA}.mbtiles --verbose
    - name: 'Upload compiled executable'
      uses: actions/upload-artifact@v2
      with:
        name: tilemaker
        path: build/tilemaker

  Github-Action:
    name: Generate mbtiles with Github Action
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Download PBF file
      run: curl http://download.geofabrik.de/europe/${AREA}-latest.osm.pbf -o ${AREA}.osm.pbf

    - name: Build openmaptiles-compatible mbtiles files of given area
      uses: ./
      with:
        input: ${{ env.AREA }}.osm.pbf 
        output: ${{ env.AREA }}.mbtiles

  Windows-Build:
    name: Windows build
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Enable vcpkg cache
      uses: actions/cache@v2
      with:
        path: c:\vcpkg\installed
        key: windows-vcpkg-x64-0 # Increase the number whenever dependencies are modified
        restore-keys: windows-vcpkg-x64

    - name: Prepare vcpkg
      run: |
        vcpkg install --triplet=x64-windows-static-md \
            lua shapelib zlib protobuf[zlib] sqlite3 \
            boost-program-options boost-filesystem boost-geometry boost-system boost-asio boost-interprocess 

    - name: Install dependencies
      run: |
        mkdir ${{ github.workspace }}\build        
        cd ${{ github.workspace }}\build && cmake -DTILEMAKER_BUILD_STATIC=ON \
            -DVCPKG_TARGET_TRIPLET="x64-windows-static-md" -DCMAKE_TOOLCHAIN_FILE="c:\vcpkg\scripts\buildsystems\vcpkg.cmake"  ..
        cd ${{ github.workspace }}\build && cmake --build . --config Release

    - name: Build openmaptiles-compatible mbtiles files of Liechtenstein
      run: |
        Invoke-WebRequest -Uri  "http://download.geofabrik.de/europe/liechtenstein-latest.osm.pbf" -OutFile "liechtenstein.osm.pbf"
        ${{ github.workspace }}\build\Release\tilemaker.exe liechtenstein.osm.pbf \
            --config=resources/config-openmaptiles.json --process=resources/process-openmaptiles.lua --output=liechtenstein.mbtiles --verbose || true

    - name: 'Upload compiled executable'
      uses: actions/upload-artifact@v2
      with:
        name: tilemaker-windows
        path: |
          ${{ github.workspace }}\resources
          ${{ github.workspace }}\build\Release\tilemaker.exe
