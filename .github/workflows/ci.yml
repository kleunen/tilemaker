name: "Continuous Integration"

on:
  push:
  pull_request:
    branches: [ master ]

env:
  AREA: liechtenstein

jobs:
  build:
    name: Compile, install and build mbtiles
    runs-on: ubuntu-16.04

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends build-essential libluajit-5.1-dev libprotobuf-dev libsqlite3-dev protobuf-compiler shapelib libshp-dev 

    - name: Build and install
      env:
        S_CFLAGS: -flto -ffunction-sections -fdata-sections
        S_CXXFLAGS: -flto -ffunction-sections -fdata-sections
        S_LDFLAGS: -Wl,-gc-sections
      run: |
        mkdir build
        cd build  
        export CFLAGS=${S_CFLAGS} && export CXXFLAGS=${S_CXXFLAGS} && export LDFLAGS=${S_LDFLAGS}
        BOOST_ROOT=$BOOST_ROOT_1_72_0 cmake -DTILEMAKER_BUILD_STATIC=ON -DCMAKE_BUILD_TYPE=Release ..
        make -j 
        sudo make install

    - name: Build openmaptiles-compatible mbtiles files of Liechtenstein
      run: |
        curl http://download.geofabrik.de/europe/${AREA}-latest.osm.pbf -o ${AREA}.osm.pbf
        tilemaker ${AREA}.osm.pbf --config=resources/config-openmaptiles.json --process=resources/process-openmaptiles.lua --output=${AREA}.mbtiles --verbose

    - name: 'Upload compiled executable'
      uses: actions/upload-artifact@v2
      with:
        name: tilemaker
        path: build/tilemaker

  Github-Action:
    name: Generate mbtiles with Github Action
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Download PBF file
      run: curl http://download.geofabrik.de/europe/${AREA}-latest.osm.pbf -o ${AREA}.osm.pbf

    - name: Build openmaptiles-compatible mbtiles files of given area
      uses: ./
      with:
        input: ${{ env.AREA }}.osm.pbf 
        output: ${{ env.AREA }}.mbtiles

  Windows-Build:
    name: Windows build
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Install dependencies
      run: |
        $env:CFLAGS="/GL"      
        $env:CXXFLAGS="/GL /D_WIN32_WINNT#0x0601 /DBOOST_THREAD_VERSION#3 /DBOOST_ALLOW_DEPRECATED_HEADERS /DBOOST_ASIO_NO_DEPRECATED"
        $env:LDFLAGS="/LTCG /NODEFAULTLIB:libcmt"
        $env:BOOST_ROOT=$env:BOOST_ROOT_1_72_0
        $env:PKG_CONFIG_PATH="${{ runner.temp }}\sqlite"

        mkdir ${{ runner.temp }}\lua
        cd ${{ runner.temp }}\lua && Invoke-WebRequest -Uri "https://www.lua.org/ftp/lua-5.3.6.tar.gz " -OutFile "lua.tar.gz"
        cd ${{ runner.temp }}\lua && tar xvzf lua.tar.gz
        git clone https://github.com/alain-riedinger/lua53.git ${{ runner.temp }}\luabuild
        Copy-Item -Path "${{ runner.temp }}\luabuild\src\*" -Destination "${{ runner.temp }}\lua\lua-5.3.6\src" -Verbose
        cd ${{ runner.temp }}\lua\lua-5.3.6\src && .\Build-lua.cmd x64

        git clone https://github.com/OSGeo/shapelib ${{ runner.temp }}\shapelib
        cd ${{ runner.temp }}\shapelib && nmake /f makefile.vc shapelib.lib
                     
        git clone https://github.com/sqlite/sqlite ${{ runner.temp }}\sqlite
        cd ${{ runner.temp }}\sqlite && nmake /f Makefile.msc USE_CRT_DLL=1 libsqlite3.lib
        dir ${{ runner.temp }}\sqlite

        git clone https://github.com/zlib-ng/zlib-ng ${{ runner.temp }}\zlib-ng     
        cd ${{ runner.temp }}\zlib-ng && cmake -DZLIB_COMPAT=ON .
        cd ${{ runner.temp }}\zlib-ng && cmake --build . --config Release --target zlibstatic
        copy ${{ runner.temp }}\zlib-ng\Release\zlib.lib ${{ runner.temp }}\zlib-ng

        mkdir ${{ runner.temp }}\protobuf
        cd ${{ runner.temp }}\protobuf && Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protobuf-cpp-3.15.6.tar.gz" -OutFile "protobuf.tar.gz"
        cd ${{ runner.temp }}\protobuf && tar xvzf protobuf.tar.gz
        cd ${{ runner.temp }}\protobuf\protobuf-3.15.6\cmake && cmake -DZLIB_ROOT=${{ runner.temp }}\zlib-ng -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF .
        cd ${{ runner.temp }}\protobuf\protobuf-3.15.6\cmake && cmake --build . --config Release 
        dir ${{ runner.temp }}\protobuf\protobuf-3.15.6\cmake\Release

        mkdir ${{ github.workspace }}\build
        cd ${{ github.workspace }}\build && cmake -DTILEMAKER_BUILD_STATIC=ON -DProtobuf_SRC_ROOT_FOLDER=${{ runner.temp }}\protobuf\protobuf-3.15.6 -DZLIB_ROOT=${{ runner.temp }}\zlib-ng -DProtobuf_LIBRARY=${{ runner.temp }}\protobuf\protobuf-3.15.6\cmake\Release\libprotobuf.lib -DProtobuf_PROTOC_EXECUTABLE=${{ runner.temp }}\protobuf\protobuf-3.15.6\cmake\Release\protoc.exe -DLIBSHP_INCLUDE_DIR=${{ runner.temp }}\shapelib -DLIBSHP_LIBRARIES=${{ runner.temp }}\shapelib\shapelib.lib -DSQLITE3_INCLUDE_DIRS=${{ runner.temp }}\sqlite -DSQLITE3_LIBRARIES=${{ runner.temp }}\sqlite\libsqlite3.lib -DLUA_INCLUDE_DIR=${{ runner.temp }}\lua\lua-5.3.6\x64\include -DLUA_LIBRARIES=${{ runner.temp }}\lua\lua-5.3.6\x64\lib\lua53-static.lib ..
        cd ${{ github.workspace }}\build && cmake --build . --config Release

    - name: Build openmaptiles-compatible mbtiles files of Liechtenstein
      run: |
        Invoke-WebRequest -Uri  "http://download.geofabrik.de/europe/Liechtenstein-latest.osm.pbf" -OutFile "Liechtenstein.osm.pbf"
        .\tilemaker.exe Liechtenstein.osm.pbf --config=resources/config-openmaptiles.json --process=resources/process-openmaptiles.lua --output=Liechtenstein.mbtiles --verbose

    - name: 'Upload compiled executable'
      uses: actions/upload-artifact@v2
      with:
        name: tilemaker-windows
        path: |
          ${{ github.workspace }}\resources
          ${{ github.workspace }}\build\Release\tilemaker.exe
